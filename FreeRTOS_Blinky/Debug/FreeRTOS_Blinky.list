
FreeRTOS_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a00  08002a00  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a00  08002a00  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a00  08002a00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d4  20000010  08002a18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049e4  08002a18  000249e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005925  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190d  00000000  00000000  000259a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d6  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000139c8  00000000  00000000  0002806e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007920  00000000  00000000  0003ba36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00066f8f  00000000  00000000  00043356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001efc  00000000  00000000  000aa2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ac1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002974 	.word	0x08002974

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002974 	.word	0x08002974

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f003 0307 	and.w	r3, r3, #7
 8000172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000176:	68db      	ldr	r3, [r3, #12]
 8000178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800017a:	68ba      	ldr	r2, [r7, #8]
 800017c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000180:	4013      	ands	r3, r2
 8000182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800018c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000196:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000198:	68bb      	ldr	r3, [r7, #8]
 800019a:	60d3      	str	r3, [r2, #12]
}
 800019c:	bf00      	nop
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	e000ed00 	.word	0xe000ed00

080001ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__NVIC_GetPriorityGrouping+0x18>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	f003 0307 	and.w	r3, r3, #7
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	e000ed00 	.word	0xe000ed00

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4906      	ldr	r1, [pc, #24]	; (80001fc <__NVIC_EnableIRQ+0x34>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	e000e100 	.word	0xe000e100

08000200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000210:	2b00      	cmp	r3, #0
 8000212:	db0a      	blt.n	800022a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	b2da      	uxtb	r2, r3
 8000218:	490c      	ldr	r1, [pc, #48]	; (800024c <__NVIC_SetPriority+0x4c>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000228:	e00a      	b.n	8000240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4908      	ldr	r1, [pc, #32]	; (8000250 <__NVIC_SetPriority+0x50>)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	f003 030f 	and.w	r3, r3, #15
 8000236:	3b04      	subs	r3, #4
 8000238:	0112      	lsls	r2, r2, #4
 800023a:	b2d2      	uxtb	r2, r2
 800023c:	440b      	add	r3, r1
 800023e:	761a      	strb	r2, [r3, #24]
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	e000e100 	.word	0xe000e100
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000254:	b480      	push	{r7}
 8000256:	b089      	sub	sp, #36	; 0x24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	f1c3 0307 	rsb	r3, r3, #7
 800026e:	2b04      	cmp	r3, #4
 8000270:	bf28      	it	cs
 8000272:	2304      	movcs	r3, #4
 8000274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	3304      	adds	r3, #4
 800027a:	2b06      	cmp	r3, #6
 800027c:	d902      	bls.n	8000284 <NVIC_EncodePriority+0x30>
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	3b03      	subs	r3, #3
 8000282:	e000      	b.n	8000286 <NVIC_EncodePriority+0x32>
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000288:	f04f 32ff 	mov.w	r2, #4294967295
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fa02 f303 	lsl.w	r3, r2, r3
 8000292:	43da      	mvns	r2, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	401a      	ands	r2, r3
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800029c:	f04f 31ff 	mov.w	r1, #4294967295
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	43d9      	mvns	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	4313      	orrs	r3, r2
         );
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3724      	adds	r7, #36	; 0x24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <LL_RCC_HSI_Enable+0x18>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <LL_RCC_HSI_Enable+0x18>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_RCC_HSI_IsReady+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	bf0c      	ite	eq
 80002e4:	2301      	moveq	r3, #1
 80002e6:	2300      	movne	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	4903      	ldr	r1, [pc, #12]	; (800031c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800030e:	4313      	orrs	r3, r2
 8000310:	600b      	str	r3, [r1, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <LL_RCC_SetSysClkSource+0x24>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f023 0203 	bic.w	r2, r3, #3
 8000330:	4904      	ldr	r1, [pc, #16]	; (8000344 <LL_RCC_SetSysClkSource+0x24>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	604b      	str	r3, [r1, #4]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <LL_RCC_GetSysClkSource+0x14>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	f003 030c 	and.w	r3, r3, #12
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000

08000360 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_RCC_SetAHBPrescaler+0x24>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000370:	4904      	ldr	r1, [pc, #16]	; (8000384 <LL_RCC_SetAHBPrescaler+0x24>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4313      	orrs	r3, r2
 8000376:	604b      	str	r3, [r1, #4]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <LL_RCC_SetAPB1Prescaler+0x24>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000398:	4904      	ldr	r1, [pc, #16]	; (80003ac <LL_RCC_SetAPB1Prescaler+0x24>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4313      	orrs	r3, r2
 800039e:	604b      	str	r3, [r1, #4]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003c0:	4904      	ldr	r1, [pc, #16]	; (80003d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	604b      	str	r3, [r1, #4]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e2:	69da      	ldr	r2, [r3, #28]
 80003e4:	4907      	ldr	r1, [pc, #28]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f6:	68fb      	ldr	r3, [r7, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000412:	699a      	ldr	r2, [r3, #24]
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_APB2_GRP1_EnableClock+0x2c>)
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <LL_FLASH_SetLatency+0x24>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f023 0207 	bic.w	r2, r3, #7
 8000448:	4904      	ldr	r1, [pc, #16]	; (800045c <LL_FLASH_SetLatency+0x24>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	600b      	str	r3, [r1, #0]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40022000 	.word	0x40022000

08000460 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <LL_FLASH_GetLatency+0x14>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0307 	and.w	r3, r3, #7
}
 800046c:	4618      	mov	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40022000 	.word	0x40022000

08000478 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	615a      	str	r2, [r3, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	611a      	str	r2, [r3, #16]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	0a1b      	lsrs	r3, r3, #8
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	615a      	str	r2, [r3, #20]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	b29b      	uxth	r3, r3
 8000512:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4013      	ands	r3, r2
 800051a:	041a      	lsls	r2, r3, #16
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	43d9      	mvns	r1, r3
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	400b      	ands	r3, r1
 8000524:	431a      	orrs	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	611a      	str	r2, [r3, #16]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff ff64 	bl	8000408 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000540:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000544:	f7ff ff48 	bl	80003d8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f7ff fe0b 	bl	8000164 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800054e:	f7ff fe2d 	bl	80001ac <__NVIC_GetPriorityGrouping>
 8000552:	4603      	mov	r3, r0
 8000554:	2200      	movs	r2, #0
 8000556:	210f      	movs	r1, #15
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe7b 	bl	8000254 <NVIC_EncodePriority>
 800055e:	4603      	mov	r3, r0
 8000560:	4619      	mov	r1, r3
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f7ff fe4b 	bl	8000200 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f82b 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8c1 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f859 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTStdioConfig(USART2,true);
 8000576:	2101      	movs	r1, #1
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <main+0x78>)
 800057a:	f001 fddf 	bl	800213c <UARTStdioConfig>
  xTaskCreate(Status_Led_Task, "statusLEDTask",configMINIMAL_STACK_SIZE, NULL, 1, &status_task_Handle);
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0x7c>)
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	490a      	ldr	r1, [pc, #40]	; (80005b4 <main+0x80>)
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0x84>)
 800058e:	f000 fd71 	bl	8001074 <xTaskCreate>
  xTaskCreate(UART, "UART",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	4907      	ldr	r1, [pc, #28]	; (80005bc <main+0x88>)
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <main+0x8c>)
 80005a2:	f000 fd67 	bl	8001074 <xTaskCreate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  vTaskStartScheduler();
 80005a6:	f000 fec9 	bl	800133c <vTaskStartScheduler>
  while (1)
 80005aa:	e7fe      	b.n	80005aa <main+0x76>
 80005ac:	40004400 	.word	0x40004400
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	0800298c 	.word	0x0800298c
 80005b8:	08000765 	.word	0x08000765
 80005bc:	0800299c 	.word	0x0800299c
 80005c0:	08000785 	.word	0x08000785

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ff35 	bl	8000438 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005ce:	bf00      	nop
 80005d0:	f7ff ff46 	bl	8000460 <LL_FLASH_GetLatency>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1fa      	bne.n	80005d0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005da:	2010      	movs	r0, #16
 80005dc:	f7ff fe8c 	bl	80002f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80005e0:	f7ff fe6a 	bl	80002b8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005e4:	bf00      	nop
 80005e6:	f7ff fe75 	bl	80002d4 <LL_RCC_HSI_IsReady>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1fa      	bne.n	80005e6 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff feb5 	bl	8000360 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fec6 	bl	8000388 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff fed7 	bl	80003b0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff fe8c 	bl	8000320 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000608:	bf00      	nop
 800060a:	f7ff fe9d 	bl	8000348 <LL_RCC_GetSysClkSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1fa      	bne.n	800060a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <SystemClock_Config+0x60>)
 8000616:	f000 fc85 	bl	8000f24 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800061a:	4802      	ldr	r0, [pc, #8]	; (8000624 <SystemClock_Config+0x60>)
 800061c:	f000 fc90 	bl	8000f40 <LL_SetSystemCoreClock>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	007a1200 	.word	0x007a1200

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000650:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000654:	f7ff fec0 	bl	80003d8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000658:	2004      	movs	r0, #4
 800065a:	f7ff fed5 	bl	8000408 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800065e:	f240 4304 	movw	r3, #1028	; 0x404
 8000662:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000664:	2309      	movs	r3, #9
 8000666:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000668:	2303      	movs	r3, #3
 800066a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <MX_USART2_UART_Init+0xc4>)
 8000676:	f000 f9cc 	bl	8000a12 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800067a:	f640 0308 	movw	r3, #2056	; 0x808
 800067e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000680:	2304      	movs	r3, #4
 8000682:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <MX_USART2_UART_Init+0xc4>)
 800068a:	f000 f9c2 	bl	8000a12 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800068e:	f7ff fd8d 	bl	80001ac <__NVIC_GetPriorityGrouping>
 8000692:	4603      	mov	r3, r0
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fddb 	bl	8000254 <NVIC_EncodePriority>
 800069e:	4603      	mov	r3, r0
 80006a0:	4619      	mov	r1, r3
 80006a2:	2026      	movs	r0, #38	; 0x26
 80006a4:	f7ff fdac 	bl	8000200 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80006a8:	2026      	movs	r0, #38	; 0x26
 80006aa:	f7ff fd8d 	bl	80001c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80006ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006b2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006c0:	230c      	movs	r3, #12
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <MX_USART2_UART_Init+0xc8>)
 80006d4:	f000 fbac 	bl	8000e30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0xc8>)
 80006da:	f7ff fedc 	bl	8000496 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_USART2_UART_Init+0xc8>)
 80006e0:	f7ff feca 	bl	8000478 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3730      	adds	r7, #48	; 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010800 	.word	0x40010800
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000708:	2004      	movs	r0, #4
 800070a:	f7ff fe7d 	bl	8000408 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800070e:	2008      	movs	r0, #8
 8000710:	f7ff fe7a 	bl	8000408 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED1_Pin|LED2_Pin);
 8000714:	f246 0160 	movw	r1, #24672	; 0x6060
 8000718:	480f      	ldr	r0, [pc, #60]	; (8000758 <MX_GPIO_Init+0x64>)
 800071a:	f7ff fee0 	bl	80004de <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800071e:	f246 0360 	movw	r3, #24672	; 0x6060
 8000722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000724:	2301      	movs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <MX_GPIO_Init+0x64>)
 8000736:	f000 f96c 	bl	8000a12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_GPIO_Init+0x68>)
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800073e:	2308      	movs	r3, #8
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0x6c>)
 800074c:	f000 f961 	bl	8000a12 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010800 	.word	0x40010800
 800075c:	04700070 	.word	0x04700070
 8000760:	40010c00 	.word	0x40010c00

08000764 <Status_Led_Task>:

/* USER CODE BEGIN 4 */
static void Status_Led_Task( void *pvParameters )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	while(1)
	{
        LL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800076c:	f242 0120 	movw	r1, #8224	; 0x2020
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <Status_Led_Task+0x1c>)
 8000772:	f7ff fec3 	bl	80004fc <LL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 fdbb 	bl	80012f4 <vTaskDelay>
        LL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800077e:	e7f5      	b.n	800076c <Status_Led_Task+0x8>
 8000780:	40010800 	.word	0x40010800

08000784 <UART>:

	}
}
static void UART( void *pvParameters )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while(1)
	{

         char buffer[10];

         UARTgets(buffer,10);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	210a      	movs	r1, #10
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fd5c 	bl	8002250 <UARTgets>
		 if (strcmp(buffer,"on")==0){
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4919      	ldr	r1, [pc, #100]	; (8000804 <UART+0x80>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fcd6 	bl	8000150 <strcmp>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d104      	bne.n	80007b4 <UART+0x30>
			LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 80007aa:	f244 0140 	movw	r1, #16448	; 0x4040
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <UART+0x84>)
 80007b0:	f7ff fe86 	bl	80004c0 <LL_GPIO_SetOutputPin>
		}

		 if (strcmp(buffer,"off")==0){
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4914      	ldr	r1, [pc, #80]	; (800080c <UART+0x88>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fcc8 	bl	8000150 <strcmp>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <UART+0x4c>
			LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 80007c6:	f244 0140 	movw	r1, #16448	; 0x4040
 80007ca:	480f      	ldr	r0, [pc, #60]	; (8000808 <UART+0x84>)
 80007cc:	f7ff fe87 	bl	80004de <LL_GPIO_ResetOutputPin>
		}

		 if(strcmp(buffer,"on")!=0&&strcmp(buffer,"off")!=0){
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	490b      	ldr	r1, [pc, #44]	; (8000804 <UART+0x80>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fcba 	bl	8000150 <strcmp>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <UART+0x76>
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4909      	ldr	r1, [pc, #36]	; (800080c <UART+0x88>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcb1 	bl	8000150 <strcmp>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <UART+0x76>
			UARTprintf("InValid\n");
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <UART+0x8c>)
 80007f6:	f001 ff6d 	bl	80026d4 <UARTprintf>
		}

          vTaskDelay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fd7a 	bl	80012f4 <vTaskDelay>
	{
 8000800:	e7c4      	b.n	800078c <UART+0x8>
 8000802:	bf00      	nop
 8000804:	080029a4 	.word	0x080029a4
 8000808:	40010800 	.word	0x40010800
 800080c:	080029a8 	.word	0x080029a8
 8000810:	080029ac 	.word	0x080029ac

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTStdioIntHandler();
 8000842:	f001 ff9d 	bl	8002780 <UARTStdioIntHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
	...

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff fff7 	bl	800084a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085e:	490c      	ldr	r1, [pc, #48]	; (8000890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000874:	4c09      	ldr	r4, [pc, #36]	; (800089c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f002 f853 	bl	800292c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff fe55 	bl	8000534 <main>
  bx lr
 800088a:	4770      	bx	lr
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000894:	08002a08 	.word	0x08002a08
  ldr r2, =_sbss
 8000898:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800089c:	200049e4 	.word	0x200049e4

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>

080008a2 <LL_GPIO_SetPinMode>:
{
 80008a2:	b490      	push	{r4, r7}
 80008a4:	b088      	sub	sp, #32
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	461a      	mov	r2, r3
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	0e1b      	lsrs	r3, r3, #24
 80008b6:	4413      	add	r3, r2
 80008b8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80008ba:	6822      	ldr	r2, [r4, #0]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa93 f3a3 	rbit	r3, r3
 80008c6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	fab3 f383 	clz	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	210f      	movs	r1, #15
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	401a      	ands	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	fa93 f3a3 	rbit	r3, r3
 80008e6:	61bb      	str	r3, [r7, #24]
  return result;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fab3 f383 	clz	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6023      	str	r3, [r4, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bc90      	pop	{r4, r7}
 8000904:	4770      	bx	lr

08000906 <LL_GPIO_SetPinSpeed>:
{
 8000906:	b490      	push	{r4, r7}
 8000908:	b088      	sub	sp, #32
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	461a      	mov	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	0e1b      	lsrs	r3, r3, #24
 800091a:	4413      	add	r3, r2
 800091c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800091e:	6822      	ldr	r2, [r4, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa93 f3a3 	rbit	r3, r3
 800092a:	613b      	str	r3, [r7, #16]
  return result;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	fab3 f383 	clz	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	2103      	movs	r1, #3
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	401a      	ands	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	fa93 f3a3 	rbit	r3, r3
 800094a:	61bb      	str	r3, [r7, #24]
  return result;
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fab3 f383 	clz	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	6023      	str	r3, [r4, #0]
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bc90      	pop	{r4, r7}
 8000968:	4770      	bx	lr

0800096a <LL_GPIO_SetPinOutputType>:
{
 800096a:	b490      	push	{r4, r7}
 800096c:	b088      	sub	sp, #32
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	461a      	mov	r2, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	0e1b      	lsrs	r3, r3, #24
 800097e:	4413      	add	r3, r2
 8000980:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000982:	6822      	ldr	r2, [r4, #0]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	613b      	str	r3, [r7, #16]
  return result;
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	fab3 f383 	clz	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	2104      	movs	r1, #4
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	fa93 f3a3 	rbit	r3, r3
 80009ae:	61bb      	str	r3, [r7, #24]
  return result;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fab3 f383 	clz	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	6023      	str	r3, [r4, #0]
}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc90      	pop	{r4, r7}
 80009cc:	4770      	bx	lr

080009ce <LL_GPIO_SetPinPull>:
{
 80009ce:	b480      	push	{r7}
 80009d0:	b087      	sub	sp, #28
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	43db      	mvns	r3, r3
 80009e4:	401a      	ands	r2, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa93 f3a3 	rbit	r3, r3
 80009f2:	613b      	str	r3, [r7, #16]
  return result;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	fab3 f383 	clz	r3, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	408b      	lsls	r3, r1
 8000a02:	431a      	orrs	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	60da      	str	r2, [r3, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	371c      	adds	r7, #28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b088      	sub	sp, #32
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	fa93 f3a3 	rbit	r3, r3
 8000a30:	60fb      	str	r3, [r7, #12]
  return result;
 8000a32:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000a34:	fab3 f383 	clz	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000a3c:	e044      	b.n	8000ac8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d03a      	beq.n	8000ac2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d806      	bhi.n	8000a60 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000a52:	f240 1201 	movw	r2, #257	; 0x101
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	e008      	b.n	8000a72 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	3b08      	subs	r3, #8
 8000a64:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a70:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d106      	bne.n	8000a88 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	69b9      	ldr	r1, [r7, #24]
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa3 	bl	80009ce <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69b9      	ldr	r1, [r7, #24]
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff06 	bl	80008a2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d003      	beq.n	8000aa6 <LL_GPIO_Init+0x94>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b09      	cmp	r3, #9
 8000aa4:	d10d      	bne.n	8000ac2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	69b9      	ldr	r1, [r7, #24]
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ff29 	bl	8000906 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	69b9      	ldr	r1, [r7, #24]
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff54 	bl	800096a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1b4      	bne.n	8000a3e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <LL_RCC_GetSysClkSource>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <LL_RCC_GetSysClkSource+0x14>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 030c 	and.w	r3, r3, #12
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000

08000af8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <LL_RCC_GetAHBPrescaler+0x14>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <LL_RCC_GetAPB2Prescaler+0x14>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <LL_RCC_PLL_GetMainSource+0x14>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000

08000b70 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <LL_RCC_PLL_GetPrediv+0x18>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	0c5b      	lsrs	r3, r3, #17
 8000b7a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b94:	f000 f820 	bl	8000bd8 <RCC_GetSystemClockFreq>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f83e 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f84c 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f858 	bl	8000c78 <RCC_GetPCLK2ClockFreq>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60da      	str	r2, [r3, #12]
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000be2:	f7ff ff7d 	bl	8000ae0 <LL_RCC_GetSysClkSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d00c      	beq.n	8000c06 <RCC_GetSystemClockFreq+0x2e>
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d80e      	bhi.n	8000c0e <RCC_GetSystemClockFreq+0x36>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <RCC_GetSystemClockFreq+0x22>
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d003      	beq.n	8000c00 <RCC_GetSystemClockFreq+0x28>
 8000bf8:	e009      	b.n	8000c0e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <RCC_GetSystemClockFreq+0x48>)
 8000bfc:	607b      	str	r3, [r7, #4]
      break;
 8000bfe:	e009      	b.n	8000c14 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <RCC_GetSystemClockFreq+0x48>)
 8000c02:	607b      	str	r3, [r7, #4]
      break;
 8000c04:	e006      	b.n	8000c14 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000c06:	f000 f84b 	bl	8000ca0 <RCC_PLL_GetFreqDomain_SYS>
 8000c0a:	6078      	str	r0, [r7, #4]
      break;
 8000c0c:	e002      	b.n	8000c14 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <RCC_GetSystemClockFreq+0x48>)
 8000c10:	607b      	str	r3, [r7, #4]
      break;
 8000c12:	bf00      	nop
  }

  return frequency;
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	007a1200 	.word	0x007a1200

08000c24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000c2c:	f7ff ff64 	bl	8000af8 <LL_RCC_GetAHBPrescaler>
 8000c30:	4603      	mov	r3, r0
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <RCC_GetHCLKClockFreq+0x28>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	40d3      	lsrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080029e8 	.word	0x080029e8

08000c50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000c58:	f7ff ff5a 	bl	8000b10 <LL_RCC_GetAPB1Prescaler>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <RCC_GetPCLK1ClockFreq+0x24>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	080029f8 	.word	0x080029f8

08000c78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000c80:	f7ff ff52 	bl	8000b28 <LL_RCC_GetAPB2Prescaler>
 8000c84:	4603      	mov	r3, r0
 8000c86:	0adb      	lsrs	r3, r3, #11
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <RCC_GetPCLK2ClockFreq+0x24>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	080029f8 	.word	0x080029f8

08000ca0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000cae:	f7ff ff47 	bl	8000b40 <LL_RCC_PLL_GetMainSource>
 8000cb2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d003      	beq.n	8000cca <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000cc2:	e00b      	b.n	8000cdc <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000cc6:	607b      	str	r3, [r7, #4]
      break;
 8000cc8:	e00b      	b.n	8000ce2 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000cca:	f7ff ff51 	bl	8000b70 <LL_RCC_PLL_GetPrediv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd8:	607b      	str	r3, [r7, #4]
      break;
 8000cda:	e002      	b.n	8000ce2 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000cde:	607b      	str	r3, [r7, #4]
      break;
 8000ce0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000ce2:	f7ff ff39 	bl	8000b58 <LL_RCC_PLL_GetMultiplicator>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	3302      	adds	r3, #2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	003d0900 	.word	0x003d0900
 8000d00:	007a1200 	.word	0x007a1200

08000d04 <LL_USART_IsEnabled>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <LL_USART_SetStopBitsLength>:
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <LL_USART_SetHWFlowCtrl>:
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	615a      	str	r2, [r3, #20]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
	...

08000d74 <LL_USART_SetBaudRate>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009a      	lsls	r2, r3, #2
 8000d8a:	441a      	add	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4a25      	ldr	r2, [pc, #148]	; (8000e2c <LL_USART_SetBaudRate+0xb8>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b299      	uxth	r1, r3
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	009a      	lsls	r2, r3, #2
 8000dac:	441a      	add	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <LL_USART_SetBaudRate+0xb8>)
 8000db8:	fba3 0302 	umull	r0, r3, r3, r2
 8000dbc:	095b      	lsrs	r3, r3, #5
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	fb00 f303 	mul.w	r3, r0, r3
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	3332      	adds	r3, #50	; 0x32
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <LL_USART_SetBaudRate+0xb8>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	095b      	lsrs	r3, r3, #5
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	440b      	add	r3, r1
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	009a      	lsls	r2, r3, #2
 8000de8:	441a      	add	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <LL_USART_SetBaudRate+0xb8>)
 8000df4:	fba3 0302 	umull	r0, r3, r3, r2
 8000df8:	095b      	lsrs	r3, r3, #5
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	fb00 f303 	mul.w	r3, r0, r3
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	3332      	adds	r3, #50	; 0x32
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <LL_USART_SetBaudRate+0xb8>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	095b      	lsrs	r3, r3, #5
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	440b      	add	r3, r1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	609a      	str	r2, [r3, #8]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	51eb851f 	.word	0x51eb851f

08000e30 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff5e 	bl	8000d04 <LL_USART_IsEnabled>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d145      	bne.n	8000eda <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000e56:	f023 030c 	bic.w	r3, r3, #12
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	6851      	ldr	r1, [r2, #4]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	68d2      	ldr	r2, [r2, #12]
 8000e62:	4311      	orrs	r1, r2
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	6912      	ldr	r2, [r2, #16]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff57 	bl	8000d2a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff63 	bl	8000d4e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe7d 	bl	8000b8c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <LL_USART_Init+0xb4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	e00c      	b.n	8000eba <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <LL_USART_Init+0xb8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d102      	bne.n	8000eae <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e005      	b.n	8000eba <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LL_USART_Init+0xbc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00c      	beq.n	8000eda <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff4d 	bl	8000d74 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40004800 	.word	0x40004800

08000ef0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <LL_InitTick+0x30>)
 8000f04:	3b01      	subs	r3, #1
 8000f06:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <LL_InitTick+0x30>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <LL_InitTick+0x30>)
 8000f10:	2205      	movs	r2, #5
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffdd 	bl	8000ef0 <LL_InitTick>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <LL_SetSystemCoreClock+0x18>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000000 	.word	0x20000000

08000f5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f103 0208 	add.w	r2, r3, #8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 0208 	add.w	r2, r3, #8
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f103 0208 	add.w	r2, r3, #8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d103      	bne.n	8000fd2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e00c      	b.n	8000fec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e002      	b.n	8000fe0 <vListInsert+0x2e>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d2f6      	bcs.n	8000fda <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6892      	ldr	r2, [r2, #8]
 8001038:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6852      	ldr	r2, [r2, #4]
 8001042:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d103      	bne.n	8001056 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af04      	add	r7, sp, #16
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4613      	mov	r3, r2
 8001082:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fe31 	bl	8001cf0 <pvPortMalloc>
 800108e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d013      	beq.n	80010be <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001096:	2054      	movs	r0, #84	; 0x54
 8001098:	f000 fe2a 	bl	8001cf0 <pvPortMalloc>
 800109c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80010a4:	2254      	movs	r2, #84	; 0x54
 80010a6:	2100      	movs	r1, #0
 80010a8:	69f8      	ldr	r0, [r7, #28]
 80010aa:	f001 fc37 	bl	800291c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
 80010b4:	e005      	b.n	80010c2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f000 feb8 	bl	8001e2c <vPortFree>
 80010bc:	e001      	b.n	80010c2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010c8:	88fa      	ldrh	r2, [r7, #6]
 80010ca:	2300      	movs	r3, #0
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f80e 	bl	8001100 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	f000 f873 	bl	80011d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e002      	b.n	80010f6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010f6:	69bb      	ldr	r3, [r7, #24]
    }
 80010f8:	4618      	mov	r0, r3
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001118:	3b01      	subs	r3, #1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f023 0307 	bic.w	r3, r3, #7
 8001126:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01e      	beq.n	800116c <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e012      	b.n	800115a <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	7819      	ldrb	r1, [r3, #0]
 800113c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	3334      	adds	r3, #52	; 0x34
 8001144:	460a      	mov	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d9e9      	bls.n	8001134 <prvInitialiseNewTask+0x34>
 8001160:	e000      	b.n	8001164 <prvInitialiseNewTask+0x64>
            {
                break;
 8001162:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d901      	bls.n	8001176 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	6a3a      	ldr	r2, [r7, #32]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	6a3a      	ldr	r2, [r7, #32]
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	3304      	adds	r3, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff07 	bl	8000f9a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	3318      	adds	r3, #24
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff02 	bl	8000f9a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	f1c3 0205 	rsb	r2, r3, #5
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	6938      	ldr	r0, [r7, #16]
 80011b2:	f000 fc75 	bl	8001aa0 <pxPortInitialiseStack>
 80011b6:	4602      	mov	r2, r0
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80011d8:	f000 fcf0 	bl	8001bbc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <prvAddNewTaskToReadyList+0x108>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <prvAddNewTaskToReadyList+0x108>)
 80011e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <prvAddNewTaskToReadyList+0x10c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80011ee:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <prvAddNewTaskToReadyList+0x10c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <prvAddNewTaskToReadyList+0x108>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d110      	bne.n	800121e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80011fc:	f000 fb38 	bl	8001870 <prvInitialiseTaskLists>
 8001200:	e00d      	b.n	800121e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <prvAddNewTaskToReadyList+0x110>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <prvAddNewTaskToReadyList+0x10c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	429a      	cmp	r2, r3
 8001216:	d802      	bhi.n	800121e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001218:	4a30      	ldr	r2, [pc, #192]	; (80012dc <prvAddNewTaskToReadyList+0x10c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <prvAddNewTaskToReadyList+0x114>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <prvAddNewTaskToReadyList+0x114>)
 8001226:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2201      	movs	r2, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <prvAddNewTaskToReadyList+0x118>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4313      	orrs	r3, r2
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <prvAddNewTaskToReadyList+0x118>)
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123e:	492b      	ldr	r1, [pc, #172]	; (80012ec <prvAddNewTaskToReadyList+0x11c>)
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	3204      	adds	r2, #4
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <prvAddNewTaskToReadyList+0x11c>)
 800127e:	441a      	add	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	4918      	ldr	r1, [pc, #96]	; (80012ec <prvAddNewTaskToReadyList+0x11c>)
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	4814      	ldr	r0, [pc, #80]	; (80012ec <prvAddNewTaskToReadyList+0x11c>)
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4403      	add	r3, r0
 80012a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80012a6:	f000 fca3 	bl	8001bf0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <prvAddNewTaskToReadyList+0x110>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00e      	beq.n	80012d0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <prvAddNewTaskToReadyList+0x10c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <prvAddNewTaskToReadyList+0x120>)
 80012c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000108 	.word	0x20000108
 80012dc:	20000030 	.word	0x20000030
 80012e0:	20000114 	.word	0x20000114
 80012e4:	20000124 	.word	0x20000124
 80012e8:	20000110 	.word	0x20000110
 80012ec:	20000034 	.word	0x20000034
 80012f0:	e000ed04 	.word	0xe000ed04

080012f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8001306:	f000 f855 	bl	80013b4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fb47 	bl	80019a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001312:	f000 f85d 	bl	80013d0 <xTaskResumeAll>
 8001316:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <vTaskDelay+0x44>)
 8001320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000ed04 	.word	0xe000ed04

0800133c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <vTaskStartScheduler+0x5c>)
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2300      	movs	r3, #0
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	4913      	ldr	r1, [pc, #76]	; (800139c <vTaskStartScheduler+0x60>)
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <vTaskStartScheduler+0x64>)
 8001352:	f7ff fe8f 	bl	8001074 <xTaskCreate>
 8001356:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d115      	bne.n	800138a <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800135e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001362:	f383 8811 	msr	BASEPRI, r3
 8001366:	f3bf 8f6f 	isb	sy
 800136a:	f3bf 8f4f 	dsb	sy
 800136e:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001370:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <vTaskStartScheduler+0x68>)
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <vTaskStartScheduler+0x6c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <vTaskStartScheduler+0x70>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001386:	f000 fbf9 	bl	8001b7c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <vTaskStartScheduler+0x74>)
 800138c:	681b      	ldr	r3, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000012c 	.word	0x2000012c
 800139c:	080029b8 	.word	0x080029b8
 80013a0:	08001841 	.word	0x08001841
 80013a4:	20000128 	.word	0x20000128
 80013a8:	20000114 	.word	0x20000114
 80013ac:	2000010c 	.word	0x2000010c
 80013b0:	20000004 	.word	0x20000004

080013b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <vTaskSuspendAll+0x18>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a03      	ldr	r2, [pc, #12]	; (80013cc <vTaskSuspendAll+0x18>)
 80013c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000130 	.word	0x20000130

080013d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013de:	f000 fbed 	bl	8001bbc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <xTaskResumeAll+0x1b4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a66      	ldr	r2, [pc, #408]	; (8001584 <xTaskResumeAll+0x1b4>)
 80013ea:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013ec:	4b65      	ldr	r3, [pc, #404]	; (8001584 <xTaskResumeAll+0x1b4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 80c0 	bne.w	8001576 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <xTaskResumeAll+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80bb 	beq.w	8001576 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001400:	e08a      	b.n	8001518 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <xTaskResumeAll+0x1bc>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	6a12      	ldr	r2, [r2, #32]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	69d2      	ldr	r2, [r2, #28]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3318      	adds	r3, #24
 800142c:	429a      	cmp	r2, r3
 800142e:	d103      	bne.n	8001438 <xTaskResumeAll+0x68>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1e5a      	subs	r2, r3, #1
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	68d2      	ldr	r2, [r2, #12]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	6892      	ldr	r2, [r2, #8]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3304      	adds	r3, #4
 800146a:	429a      	cmp	r2, r3
 800146c:	d103      	bne.n	8001476 <xTaskResumeAll+0xa6>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	2201      	movs	r2, #1
 800148c:	409a      	lsls	r2, r3
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <xTaskResumeAll+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <xTaskResumeAll+0x1c0>)
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	493d      	ldr	r1, [pc, #244]	; (8001594 <xTaskResumeAll+0x1c4>)
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3304      	adds	r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	3204      	adds	r2, #4
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	1d1a      	adds	r2, r3, #4
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <xTaskResumeAll+0x1c4>)
 80014dc:	441a      	add	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	492b      	ldr	r1, [pc, #172]	; (8001594 <xTaskResumeAll+0x1c4>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	4827      	ldr	r0, [pc, #156]	; (8001594 <xTaskResumeAll+0x1c4>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4403      	add	r3, r0
 8001502:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <xTaskResumeAll+0x1c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	429a      	cmp	r2, r3
 8001510:	d302      	bcc.n	8001518 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <xTaskResumeAll+0x1cc>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <xTaskResumeAll+0x1bc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f af70 	bne.w	8001402 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001528:	f000 fa20 	bl	800196c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <xTaskResumeAll+0x1d0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001538:	f000 f836 	bl	80015a8 <xTaskIncrementTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <xTaskResumeAll+0x1cc>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3b01      	subs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f1      	bne.n	8001538 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <xTaskResumeAll+0x1d0>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <xTaskResumeAll+0x1cc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001562:	2301      	movs	r3, #1
 8001564:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <xTaskResumeAll+0x1d4>)
 8001568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001576:	f000 fb3b 	bl	8001bf0 <vPortExitCritical>

    return xAlreadyYielded;
 800157a:	693b      	ldr	r3, [r7, #16]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000130 	.word	0x20000130
 8001588:	20000108 	.word	0x20000108
 800158c:	200000c8 	.word	0x200000c8
 8001590:	20000110 	.word	0x20000110
 8001594:	20000034 	.word	0x20000034
 8001598:	20000030 	.word	0x20000030
 800159c:	2000011c 	.word	0x2000011c
 80015a0:	20000118 	.word	0x20000118
 80015a4:	e000ed04 	.word	0xe000ed04

080015a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015b2:	4b75      	ldr	r3, [pc, #468]	; (8001788 <xTaskIncrementTick+0x1e0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 80dc 	bne.w	8001774 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015bc:	4b73      	ldr	r3, [pc, #460]	; (800178c <xTaskIncrementTick+0x1e4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015c4:	4a71      	ldr	r2, [pc, #452]	; (800178c <xTaskIncrementTick+0x1e4>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d110      	bne.n	80015f2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80015d0:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <xTaskIncrementTick+0x1e8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <xTaskIncrementTick+0x1ec>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <xTaskIncrementTick+0x1e8>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4a6d      	ldr	r2, [pc, #436]	; (8001794 <xTaskIncrementTick+0x1ec>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <xTaskIncrementTick+0x1f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <xTaskIncrementTick+0x1f0>)
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	f000 f9bd 	bl	800196c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <xTaskIncrementTick+0x1f4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f0c0 80a6 	bcc.w	800174a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015fe:	4b64      	ldr	r3, [pc, #400]	; (8001790 <xTaskIncrementTick+0x1e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <xTaskIncrementTick+0x1f4>)
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	601a      	str	r2, [r3, #0]
                    break;
 8001610:	e09b      	b.n	800174a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <xTaskIncrementTick+0x1e8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d203      	bcs.n	8001632 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800162a:	4a5c      	ldr	r2, [pc, #368]	; (800179c <xTaskIncrementTick+0x1f4>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001630:	e08b      	b.n	800174a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68d2      	ldr	r2, [r2, #12]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	3304      	adds	r3, #4
 8001654:	429a      	cmp	r2, r3
 8001656:	d103      	bne.n	8001660 <xTaskIncrementTick+0xb8>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01e      	beq.n	80016b6 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	6a12      	ldr	r2, [r2, #32]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	69d2      	ldr	r2, [r2, #28]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	3318      	adds	r3, #24
 800169a:	429a      	cmp	r2, r3
 800169c:	d103      	bne.n	80016a6 <xTaskIncrementTick+0xfe>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	2201      	movs	r2, #1
 80016bc:	409a      	lsls	r2, r3
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <xTaskIncrementTick+0x1f8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <xTaskIncrementTick+0x1f8>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <xTaskIncrementTick+0x1fc>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	3204      	adds	r2, #4
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1d1a      	adds	r2, r3, #4
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <xTaskIncrementTick+0x1fc>)
 800170c:	441a      	add	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001716:	4923      	ldr	r1, [pc, #140]	; (80017a4 <xTaskIncrementTick+0x1fc>)
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <xTaskIncrementTick+0x1fc>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4403      	add	r3, r0
 8001732:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <xTaskIncrementTick+0x200>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	429a      	cmp	r2, r3
 8001740:	f67f af5d 	bls.w	80015fe <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001748:	e759      	b.n	80015fe <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <xTaskIncrementTick+0x200>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001750:	4914      	ldr	r1, [pc, #80]	; (80017a4 <xTaskIncrementTick+0x1fc>)
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d901      	bls.n	8001766 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8001762:	2301      	movs	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <xTaskIncrementTick+0x204>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e004      	b.n	800177e <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <xTaskIncrementTick+0x208>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <xTaskIncrementTick+0x208>)
 800177c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800177e:	69fb      	ldr	r3, [r7, #28]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000130 	.word	0x20000130
 800178c:	2000010c 	.word	0x2000010c
 8001790:	200000c0 	.word	0x200000c0
 8001794:	200000c4 	.word	0x200000c4
 8001798:	20000120 	.word	0x20000120
 800179c:	20000128 	.word	0x20000128
 80017a0:	20000110 	.word	0x20000110
 80017a4:	20000034 	.word	0x20000034
 80017a8:	20000030 	.word	0x20000030
 80017ac:	2000011c 	.word	0x2000011c
 80017b0:	20000118 	.word	0x20000118

080017b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <vTaskSwitchContext+0x78>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <vTaskSwitchContext+0x7c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80017c8:	e02a      	b.n	8001820 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <vTaskSwitchContext+0x7c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <vTaskSwitchContext+0x80>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	f1c3 031f 	rsb	r3, r3, #31
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <vTaskSwitchContext+0x84>)
 80017f2:	4413      	add	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3308      	adds	r3, #8
 8001808:	429a      	cmp	r2, r3
 800180a:	d104      	bne.n	8001816 <vTaskSwitchContext+0x62>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <vTaskSwitchContext+0x88>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000130 	.word	0x20000130
 8001830:	2000011c 	.word	0x2000011c
 8001834:	20000110 	.word	0x20000110
 8001838:	20000034 	.word	0x20000034
 800183c:	20000030 	.word	0x20000030

08001840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001848:	f000 f852 	bl	80018f0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <prvIdleTask+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d9f9      	bls.n	8001848 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <prvIdleTask+0x2c>)
 8001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001864:	e7f0      	b.n	8001848 <prvIdleTask+0x8>
 8001866:	bf00      	nop
 8001868:	20000034 	.word	0x20000034
 800186c:	e000ed04 	.word	0xe000ed04

08001870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	e00c      	b.n	8001896 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <prvInitialiseTaskLists+0x60>)
 8001888:	4413      	add	r3, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb66 	bl	8000f5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d9ef      	bls.n	800187c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <prvInitialiseTaskLists+0x64>)
 800189e:	f7ff fb5d 	bl	8000f5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <prvInitialiseTaskLists+0x68>)
 80018a4:	f7ff fb5a 	bl	8000f5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <prvInitialiseTaskLists+0x6c>)
 80018aa:	f7ff fb57 	bl	8000f5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <prvInitialiseTaskLists+0x70>)
 80018b0:	f7ff fb54 	bl	8000f5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <prvInitialiseTaskLists+0x74>)
 80018b6:	f7ff fb51 	bl	8000f5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <prvInitialiseTaskLists+0x78>)
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <prvInitialiseTaskLists+0x64>)
 80018be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <prvInitialiseTaskLists+0x7c>)
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <prvInitialiseTaskLists+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000034 	.word	0x20000034
 80018d4:	20000098 	.word	0x20000098
 80018d8:	200000ac 	.word	0x200000ac
 80018dc:	200000c8 	.word	0x200000c8
 80018e0:	200000dc 	.word	0x200000dc
 80018e4:	200000f4 	.word	0x200000f4
 80018e8:	200000c0 	.word	0x200000c0
 80018ec:	200000c4 	.word	0x200000c4

080018f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018f6:	e019      	b.n	800192c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80018f8:	f000 f960 	bl	8001bbc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <prvCheckTasksWaitingTermination+0x50>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fb8a 	bl	8001022 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <prvCheckTasksWaitingTermination+0x54>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <prvCheckTasksWaitingTermination+0x54>)
 8001916:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <prvCheckTasksWaitingTermination+0x58>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <prvCheckTasksWaitingTermination+0x58>)
 8001920:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001922:	f000 f965 	bl	8001bf0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f810 	bl	800194c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <prvCheckTasksWaitingTermination+0x58>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e1      	bne.n	80018f8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000dc 	.word	0x200000dc
 8001944:	20000108 	.word	0x20000108
 8001948:	200000f0 	.word	0x200000f0

0800194c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fa67 	bl	8001e2c <vPortFree>
            vPortFree( pxTCB );
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fa64 	bl	8001e2c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <prvResetNextTaskUnblockTime+0x2c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d104      	bne.n	8001984 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <prvResetNextTaskUnblockTime+0x30>)
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001982:	e005      	b.n	8001990 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <prvResetNextTaskUnblockTime+0x2c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a03      	ldr	r2, [pc, #12]	; (800199c <prvResetNextTaskUnblockTime+0x30>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	200000c0 	.word	0x200000c0
 800199c:	20000128 	.word	0x20000128

080019a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80019aa:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <prvAddCurrentTaskToDelayedList+0xe4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3304      	adds	r3, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb33 	bl	8001022 <uxListRemove>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10b      	bne.n	80019da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2201      	movs	r2, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <prvAddCurrentTaskToDelayedList+0xec>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4013      	ands	r3, r2
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <prvAddCurrentTaskToDelayedList+0xec>)
 80019d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d124      	bne.n	8001a2c <prvAddCurrentTaskToDelayedList+0x8c>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d021      	beq.n	8001a2c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	3204      	adds	r2, #4
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1d1a      	adds	r2, r3, #4
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a2a:	e026      	b.n	8001a7a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d209      	bcs.n	8001a58 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff faae 	bl	8000fb2 <vListInsert>
}
 8001a56:	e010      	b.n	8001a7a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4610      	mov	r0, r2
 8001a66:	f7ff faa4 	bl	8000fb2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d202      	bcs.n	8001a7a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000010c 	.word	0x2000010c
 8001a88:	20000030 	.word	0x20000030
 8001a8c:	20000110 	.word	0x20000110
 8001a90:	200000f4 	.word	0x200000f4
 8001a94:	200000c4 	.word	0x200000c4
 8001a98:	200000c0 	.word	0x200000c0
 8001a9c:	20000128 	.word	0x20000128

08001aa0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b04      	subs	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f023 0201 	bic.w	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b04      	subs	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <pxPortInitialiseStack+0x54>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3b14      	subs	r3, #20
 8001ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b20      	subs	r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	08001af9 	.word	0x08001af9

08001af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001b02:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b06:	f383 8811 	msr	BASEPRI, r3
 8001b0a:	f3bf 8f6f 	isb	sy
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	607b      	str	r3, [r7, #4]
    }
 8001b14:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001b16:	bf00      	nop
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0fc      	beq.n	8001b18 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	0000      	movs	r0, r0
 8001b2c:	0000      	movs	r0, r0
	...

08001b30 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <pxCurrentTCBConst2>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	6808      	ldr	r0, [r1, #0]
 8001b36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b3a:	f380 8809 	msr	PSP, r0
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f380 8811 	msr	BASEPRI, r0
 8001b4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001b4e:	4770      	bx	lr

08001b50 <pxCurrentTCBConst2>:
 8001b50:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop

08001b58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <prvPortStartFirstTask+0x1c>)
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	6800      	ldr	r0, [r0, #0]
 8001b5e:	f380 8808 	msr	MSP, r0
 8001b62:	b662      	cpsie	i
 8001b64:	b661      	cpsie	f
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	df00      	svc	0
 8001b70:	bf00      	nop
 8001b72:	0000      	.short	0x0000
 8001b74:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop

08001b7c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <xPortStartScheduler+0x38>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <xPortStartScheduler+0x38>)
 8001b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b8a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <xPortStartScheduler+0x38>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <xPortStartScheduler+0x38>)
 8001b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b96:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b98:	f000 f890 	bl	8001cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <xPortStartScheduler+0x3c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ba2:	f7ff ffd9 	bl	8001b58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ba6:	f7ff fe05 	bl	80017b4 <vTaskSwitchContext>
    prvTaskExitError();
 8001baa:	f7ff ffa5 	bl	8001af8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	e000ed20 	.word	0xe000ed20
 8001bb8:	20000008 	.word	0x20000008

08001bbc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
        __asm volatile
 8001bc2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	607b      	str	r3, [r7, #4]
    }
 8001bd4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <vPortEnterCritical+0x30>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <vPortEnterCritical+0x30>)
 8001bde:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <vPortExitCritical+0x30>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <vPortExitCritical+0x30>)
 8001bfe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <vPortExitCritical+0x30>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <vPortExitCritical+0x24>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001c12:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
	...

08001c30 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001c30:	f3ef 8009 	mrs	r0, PSP
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <pxCurrentTCBConst>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c40:	6010      	str	r0, [r2, #0]
 8001c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001c46:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001c4a:	f380 8811 	msr	BASEPRI, r0
 8001c4e:	f7ff fdb1 	bl	80017b4 <vTaskSwitchContext>
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f380 8811 	msr	BASEPRI, r0
 8001c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	6808      	ldr	r0, [r1, #0]
 8001c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c66:	f380 8809 	msr	PSP, r0
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	4770      	bx	lr

08001c70 <pxCurrentTCBConst>:
 8001c70:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop

08001c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	607b      	str	r3, [r7, #4]
    }
 8001c90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c92:	f7ff fc89 	bl	80015a8 <xTaskIncrementTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <xPortSysTickHandler+0x40>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f383 8811 	msr	BASEPRI, r3
    }
 8001cae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <vPortSetupTimerInterrupt+0x28>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <vPortSetupTimerInterrupt+0x2c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <vPortSetupTimerInterrupt+0x30>)
 8001cce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001cd2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <vPortSetupTimerInterrupt+0x28>)
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010
 8001ce8:	e000e018 	.word	0xe000e018
 8001cec:	e000e014 	.word	0xe000e014

08001cf0 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001cfc:	f7ff fb5a 	bl	80013b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <pvPortMalloc+0x12c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8001d08:	f000 f8dc 	bl	8001ec4 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <pvPortMalloc+0x12c>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001d18:	2308      	movs	r3, #8
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	3308      	adds	r3, #8
 8001d26:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d804      	bhi.n	8001d3c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4413      	add	r3, r2
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	e001      	b.n	8001d40 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db63      	blt.n	8001e0e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d060      	beq.n	8001e0e <pvPortMalloc+0x11e>
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <pvPortMalloc+0x130>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d85b      	bhi.n	8001e0e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <pvPortMalloc+0x134>)
 8001d58:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <pvPortMalloc+0x134>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d60:	e004      	b.n	8001d6c <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d903      	bls.n	8001d7e <pvPortMalloc+0x8e>
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f1      	bne.n	8001d62 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <pvPortMalloc+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d043      	beq.n	8001e0e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2208      	movs	r2, #8
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d922      	bls.n	8001dee <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1ad2      	subs	r2, r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <pvPortMalloc+0x134>)
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	e002      	b.n	8001dd4 <pvPortMalloc+0xe4>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f6      	bhi.n	8001dce <pvPortMalloc+0xde>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <pvPortMalloc+0x130>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <pvPortMalloc+0x130>)
 8001dfa:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e0e:	f7ff fadf 	bl	80013d0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8001e12:	69fb      	ldr	r3, [r7, #28]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20004544 	.word	0x20004544
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	20004534 	.word	0x20004534
 8001e28:	2000453c 	.word	0x2000453c

08001e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d039      	beq.n	8001eb2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	425b      	negs	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0fdb      	lsrs	r3, r3, #31
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02a      	beq.n	8001eb2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d126      	bne.n	8001eb2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 8001e70:	f7ff faa0 	bl	80013b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <vPortFree+0x90>)
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e002      	b.n	8001e86 <vPortFree+0x5a>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8f6      	bhi.n	8001e80 <vPortFree+0x54>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <vPortFree+0x94>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <vPortFree+0x94>)
 8001eac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 8001eae:	f7ff fa8f 	bl	80013d0 <xTaskResumeAll>
            }
        }
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20004534 	.word	0x20004534
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <prvHeapInit+0x44>)
 8001ecc:	f023 0307 	bic.w	r3, r3, #7
 8001ed0:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <prvHeapInit+0x48>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <prvHeapInit+0x48>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <prvHeapInit+0x4c>)
 8001ee0:	f244 32f8 	movw	r2, #17400	; 0x43f8
 8001ee4:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <prvHeapInit+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f244 32f8 	movw	r2, #17400	; 0x43f8
 8001ef6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <prvHeapInit+0x4c>)
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	2000013b 	.word	0x2000013b
 8001f0c:	20004534 	.word	0x20004534
 8001f10:	2000453c 	.word	0x2000453c

08001f14 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	330c      	adds	r3, #12
 8001f44:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	e853 3f00 	ldrex	r3, [r3]
 8001f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	61ba      	str	r2, [r7, #24]
 8001f5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f60:	6979      	ldr	r1, [r7, #20]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	e841 2300 	strex	r3, r2, [r1]
 8001f68:	613b      	str	r3, [r7, #16]
   return(result);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e7      	bne.n	8001f40 <LL_USART_EnableIT_RXNE+0x8>
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	330c      	adds	r3, #12
 8001f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	61ba      	str	r2, [r7, #24]
 8001fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa4:	6979      	ldr	r1, [r7, #20]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	e841 2300 	strex	r3, r2, [r1]
 8001fac:	613b      	str	r3, [r7, #16]
   return(result);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e7      	bne.n	8001f84 <LL_USART_EnableIT_TXE+0x8>
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f023 0320 	bic.w	r3, r3, #32
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	61ba      	str	r2, [r7, #24]
 8001fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	e841 2300 	strex	r3, r2, [r1]
 8001ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e7      	bne.n	8001fc8 <LL_USART_DisableIT_RXNE+0x8>
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	330c      	adds	r3, #12
 8002010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	60bb      	str	r3, [r7, #8]
   return(result);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	330c      	adds	r3, #12
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	61ba      	str	r2, [r7, #24]
 800202a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	e841 2300 	strex	r3, r2, [r1]
 8002034:	613b      	str	r3, [r7, #16]
   return(result);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e7      	bne.n	800200c <LL_USART_DisableIT_TXE+0x8>
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <IsBufferFull>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferFull(volatile uint32_t *pui32Read,
             volatile uint32_t *pui32Write, uint32_t ui32Size)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	617b      	str	r3, [r7, #20]
    ui32Read = *pui32Read;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]

    return((((ui32Write + 1) % ui32Size) == ui32Read) ? true : false);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fbb3 f2f2 	udiv	r2, r3, r2
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	fb01 f202 	mul.w	r2, r1, r2
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <IsBufferEmpty>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60bb      	str	r3, [r7, #8]

    return((ui32Write == ui32Read) ? true : false);
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <UARTPrimeTransmit>:
//
//*****************************************************************************
#ifdef UART_BUFFERED
static void
UARTPrimeTransmit(USART_TypeDef *stdUsart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 80020dc:	4914      	ldr	r1, [pc, #80]	; (8002130 <UARTPrimeTransmit+0x5c>)
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <UARTPrimeTransmit+0x60>)
 80020e0:	f7ff ffe0 	bl	80020a4 <IsBufferEmpty>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01a      	beq.n	8002126 <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
    	LL_USART_DisableIT_TXE(stdUsart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff87 	bl	8002004 <LL_USART_DisableIT_TXE>

        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //
    	if (LL_USART_IsActiveFlag_TXE(stdUsart))
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ff0c 	bl	8001f14 <LL_USART_IsActiveFlag_TXE>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00e      	beq.n	8002120 <UARTPrimeTransmit+0x4c>
    	{
        	LL_USART_TransmitData8(stdUsart,
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <UARTPrimeTransmit+0x60>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <UARTPrimeTransmit+0x64>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff9b 	bl	8002048 <LL_USART_TransmitData8>
                                      g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <UARTPrimeTransmit+0x60>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <UARTPrimeTransmit+0x60>)
 800211e:	6013      	str	r3, [r2, #0]
    	}
        //
        // Reenable the UART interrupt.
        //
        LL_USART_EnableIT_TXE(stdUsart);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff2b 	bl	8001f7c <LL_USART_EnableIT_TXE>
    }
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000494c 	.word	0x2000494c
 8002134:	20004950 	.word	0x20004950
 8002138:	2000454c 	.word	0x2000454c

0800213c <UARTStdioConfig>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(USART_TypeDef *Usart, bool bDisableEcho)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]

    stdUsart = Usart;
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <UARTStdioConfig+0x34>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
    g_bDisableEcho = bDisableEcho;
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <UARTStdioConfig+0x38>)
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	7013      	strb	r3, [r2, #0]


    //
    // Flush both the buffers.
    //
    UARTFlushRx();
 8002154:	f000 fad0 	bl	80026f8 <UARTFlushRx>
    UARTFlushTx(true);
 8002158:	2001      	movs	r0, #1
 800215a:	f000 fae7 	bl	800272c <UARTFlushTx>
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    LL_USART_EnableIT_RXNE(stdUsart);
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <UARTStdioConfig+0x34>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fee8 	bl	8001f38 <LL_USART_EnableIT_RXNE>

#endif

}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200049dc 	.word	0x200049dc
 8002174:	20004548 	.word	0x20004548

08002178 <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    //
    // Check for valid arguments.
    //
    assert_param(pcBuf != 0);

    LL_USART_DisableIT_TXE(stdUsart);
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <UARTwrite+0xc8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff3c 	bl	8002004 <LL_USART_DisableIT_TXE>
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e042      	b.n	8002218 <UARTwrite+0xa0>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d118      	bne.n	80021d0 <UARTwrite+0x58>
        {
            if(!TX_BUFFER_FULL)
 800219e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a2:	4928      	ldr	r1, [pc, #160]	; (8002244 <UARTwrite+0xcc>)
 80021a4:	4828      	ldr	r0, [pc, #160]	; (8002248 <UARTwrite+0xd0>)
 80021a6:	f7ff ff5d 	bl	8002064 <IsBufferFull>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f083 0301 	eor.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d035      	beq.n	8002222 <UARTwrite+0xaa>
            {
                g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = '\r';
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <UARTwrite+0xcc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a24      	ldr	r2, [pc, #144]	; (800224c <UARTwrite+0xd4>)
 80021bc:	210d      	movs	r1, #13
 80021be:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <UARTwrite+0xcc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <UARTwrite+0xcc>)
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e005      	b.n	80021dc <UARTwrite+0x64>
                // Buffer is full - discard remaining characters and return.
                //
                break;
            }
        }
        else if(pcBuf[uIdx] == 0)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d024      	beq.n	8002226 <UARTwrite+0xae>
		}

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	4918      	ldr	r1, [pc, #96]	; (8002244 <UARTwrite+0xcc>)
 80021e2:	4819      	ldr	r0, [pc, #100]	; (8002248 <UARTwrite+0xd0>)
 80021e4:	f7ff ff3e 	bl	8002064 <IsBufferFull>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01a      	beq.n	800222a <UARTwrite+0xb2>
        {
            g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = pcBuf[uIdx];
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	441a      	add	r2, r3
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <UARTwrite+0xcc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	7811      	ldrb	r1, [r2, #0]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <UARTwrite+0xd4>)
 8002202:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <UARTwrite+0xcc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <UARTwrite+0xcc>)
 8002210:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3b8      	bcc.n	8002192 <UARTwrite+0x1a>
 8002220:	e004      	b.n	800222c <UARTwrite+0xb4>
                break;
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <UARTwrite+0xb4>
        	break;
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <UARTwrite+0xb4>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 800222a:	bf00      	nop
    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //

        UARTPrimeTransmit(stdUsart);
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <UARTwrite+0xc8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff4f 	bl	80020d4 <UARTPrimeTransmit>

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8002236:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200049dc 	.word	0x200049dc
 8002244:	2000494c 	.word	0x2000494c
 8002248:	20004950 	.word	0x20004950
 800224c:	2000454c 	.word	0x2000454c

08002250 <UARTgets>:
//! the trailing 0.
//
//*****************************************************************************
int
UARTgets(char *pcBuf,  uint32_t ui32Len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
#ifdef UART_BUFFERED
    uint32_t ui32Count = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]

    //
    // Adjust the length back by 1 to leave space for the trailing
    // null terminator.
    //
    ui32Len--;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	603b      	str	r3, [r7, #0]
    while(1)
    {
        //
        // Read the next character from the receive buffer.
        //
        if(!RX_BUFFER_EMPTY)
 8002264:	491e      	ldr	r1, [pc, #120]	; (80022e0 <UARTgets+0x90>)
 8002266:	481f      	ldr	r0, [pc, #124]	; (80022e4 <UARTgets+0x94>)
 8002268:	f7ff ff1c 	bl	80020a4 <IsBufferEmpty>
 800226c:	4603      	mov	r3, r0
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f5      	beq.n	8002264 <UARTgets+0x14>
        {
            cChar = g_pcUARTRxBuffer[g_ui32UARTRxReadIndex];
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <UARTgets+0x94>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <UARTgets+0x98>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	72fb      	strb	r3, [r7, #11]
            ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxReadIndex);
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <UARTgets+0x94>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <UARTgets+0x94>)
 800228e:	6013      	str	r3, [r2, #0]

            //
            // See if a newline or escape character was received.
            //
            if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b)|| (cChar == 0x0A))
 8002290:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002294:	2b0d      	cmp	r3, #13
 8002296:	d018      	beq.n	80022ca <UARTgets+0x7a>
 8002298:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800229c:	2b0a      	cmp	r3, #10
 800229e:	d014      	beq.n	80022ca <UARTgets+0x7a>
 80022a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022a4:	2b1b      	cmp	r3, #27
 80022a6:	d010      	beq.n	80022ca <UARTgets+0x7a>
 80022a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022ac:	2b0a      	cmp	r3, #10
 80022ae:	d00c      	beq.n	80022ca <UARTgets+0x7a>
            // Process the received character as long as we are not at the end
            // of the buffer.  If the end of the buffer has been reached then
            // all additional characters are ignored until a newline is
            // received.
            //
            if(ui32Count < ui32Len)
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d2d5      	bcs.n	8002264 <UARTgets+0x14>
            {
                //
                // Store the character in the caller supplied buffer.
                //
                pcBuf[ui32Count] = cChar;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	7afa      	ldrb	r2, [r7, #11]
 80022c0:	701a      	strb	r2, [r3, #0]

                //
                // Increment the count of characters received.
                //
                ui32Count++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
        if(!RX_BUFFER_EMPTY)
 80022c8:	e7cc      	b.n	8002264 <UARTgets+0x14>
    }

    //
    // Add a null termination to the string.
    //
    pcBuf[ui32Count] = 0;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]

    //
    // Return the count of int8_ts in the buffer, not counting the trailing 0.
    //
    return(ui32Count);
 80022d4:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the count of int8_ts in the buffer, not counting the trailing 0.
    //
    return(ui32Count);
#endif
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200049d4 	.word	0x200049d4
 80022e4:	200049d8 	.word	0x200049d8
 80022e8:	20004954 	.word	0x20004954

080022ec <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
    assert_param(pcString != 0);

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 80022f6:	e1dc      	b.n	80026b2 <UARTvprintf+0x3c6>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
 80022fc:	e002      	b.n	8002304 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	3301      	adds	r3, #1
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b25      	cmp	r3, #37	; 0x25
 800230e:	d005      	beq.n	800231c <UARTvprintf+0x30>
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
 800231c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff2a 	bl	8002178 <UARTwrite>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	4413      	add	r3, r2
 800232a:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b25      	cmp	r3, #37	; 0x25
 8002332:	f040 81be 	bne.w	80026b2 <UARTvprintf+0x3c6>
        {
            //
            // Skip the %.
            //
            pcString++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3301      	adds	r3, #1
 800233a:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
            cFill = ' ';
 8002340:	2320      	movs	r3, #32
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3b25      	subs	r3, #37	; 0x25
 8002350:	2b53      	cmp	r3, #83	; 0x53
 8002352:	f200 81a9 	bhi.w	80026a8 <UARTvprintf+0x3bc>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <UARTvprintf+0x70>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	0800269b 	.word	0x0800269b
 8002360:	080026a9 	.word	0x080026a9
 8002364:	080026a9 	.word	0x080026a9
 8002368:	080026a9 	.word	0x080026a9
 800236c:	080026a9 	.word	0x080026a9
 8002370:	080026a9 	.word	0x080026a9
 8002374:	080026a9 	.word	0x080026a9
 8002378:	080026a9 	.word	0x080026a9
 800237c:	080026a9 	.word	0x080026a9
 8002380:	080026a9 	.word	0x080026a9
 8002384:	080026a9 	.word	0x080026a9
 8002388:	080024ad 	.word	0x080024ad
 800238c:	080024ad 	.word	0x080024ad
 8002390:	080024ad 	.word	0x080024ad
 8002394:	080024ad 	.word	0x080024ad
 8002398:	080024ad 	.word	0x080024ad
 800239c:	080024ad 	.word	0x080024ad
 80023a0:	080024ad 	.word	0x080024ad
 80023a4:	080024ad 	.word	0x080024ad
 80023a8:	080024ad 	.word	0x080024ad
 80023ac:	080024ad 	.word	0x080024ad
 80023b0:	080026a9 	.word	0x080026a9
 80023b4:	080026a9 	.word	0x080026a9
 80023b8:	080026a9 	.word	0x080026a9
 80023bc:	080026a9 	.word	0x080026a9
 80023c0:	080026a9 	.word	0x080026a9
 80023c4:	080026a9 	.word	0x080026a9
 80023c8:	080026a9 	.word	0x080026a9
 80023cc:	080026a9 	.word	0x080026a9
 80023d0:	080026a9 	.word	0x080026a9
 80023d4:	080026a9 	.word	0x080026a9
 80023d8:	080026a9 	.word	0x080026a9
 80023dc:	080026a9 	.word	0x080026a9
 80023e0:	080026a9 	.word	0x080026a9
 80023e4:	080026a9 	.word	0x080026a9
 80023e8:	080026a9 	.word	0x080026a9
 80023ec:	080026a9 	.word	0x080026a9
 80023f0:	080026a9 	.word	0x080026a9
 80023f4:	080026a9 	.word	0x080026a9
 80023f8:	080026a9 	.word	0x080026a9
 80023fc:	080026a9 	.word	0x080026a9
 8002400:	080026a9 	.word	0x080026a9
 8002404:	080026a9 	.word	0x080026a9
 8002408:	080026a9 	.word	0x080026a9
 800240c:	080026a9 	.word	0x080026a9
 8002410:	080026a9 	.word	0x080026a9
 8002414:	080026a9 	.word	0x080026a9
 8002418:	080026a9 	.word	0x080026a9
 800241c:	080026a9 	.word	0x080026a9
 8002420:	080026a9 	.word	0x080026a9
 8002424:	080026a9 	.word	0x080026a9
 8002428:	0800258d 	.word	0x0800258d
 800242c:	080026a9 	.word	0x080026a9
 8002430:	080026a9 	.word	0x080026a9
 8002434:	080026a9 	.word	0x080026a9
 8002438:	080026a9 	.word	0x080026a9
 800243c:	080026a9 	.word	0x080026a9
 8002440:	080026a9 	.word	0x080026a9
 8002444:	080026a9 	.word	0x080026a9
 8002448:	080026a9 	.word	0x080026a9
 800244c:	080026a9 	.word	0x080026a9
 8002450:	080026a9 	.word	0x080026a9
 8002454:	080024e1 	.word	0x080024e1
 8002458:	080024f9 	.word	0x080024f9
 800245c:	080026a9 	.word	0x080026a9
 8002460:	080026a9 	.word	0x080026a9
 8002464:	080026a9 	.word	0x080026a9
 8002468:	080026a9 	.word	0x080026a9
 800246c:	080024f9 	.word	0x080024f9
 8002470:	080026a9 	.word	0x080026a9
 8002474:	080026a9 	.word	0x080026a9
 8002478:	080026a9 	.word	0x080026a9
 800247c:	080026a9 	.word	0x080026a9
 8002480:	080026a9 	.word	0x080026a9
 8002484:	080026a9 	.word	0x080026a9
 8002488:	0800258d 	.word	0x0800258d
 800248c:	080026a9 	.word	0x080026a9
 8002490:	080026a9 	.word	0x080026a9
 8002494:	08002523 	.word	0x08002523
 8002498:	080026a9 	.word	0x080026a9
 800249c:	08002575 	.word	0x08002575
 80024a0:	080026a9 	.word	0x080026a9
 80024a4:	080026a9 	.word	0x080026a9
 80024a8:	0800258d 	.word	0x0800258d
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b30      	cmp	r3, #48	; 0x30
 80024b4:	d105      	bne.n	80024c2 <UARTvprintf+0x1d6>
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <UARTvprintf+0x1d6>
                    {
                        cFill = '0';
 80024bc:	2330      	movs	r3, #48	; 0x30
 80024be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 80024c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ui32Count += pcString[-1] - '0';
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	4413      	add	r3, r2
 80024da:	3b30      	subs	r3, #48	; 0x30
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 80024de:	e732      	b.n	8002346 <UARTvprintf+0x5a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	603a      	str	r2, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	2101      	movs	r1, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fe41 	bl	8002178 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80024f6:	e0dc      	b.n	80026b2 <UARTvprintf+0x3c6>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	603a      	str	r2, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da05      	bge.n	8002518 <UARTvprintf+0x22c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	425b      	negs	r3, r3
 8002510:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	e001      	b.n	800251c <UARTvprintf+0x230>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 800251c:	230a      	movs	r3, #10
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8002520:	e03f      	b.n	80025a2 <UARTvprintf+0x2b6>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1d1a      	adds	r2, r3, #4
 8002526:	603a      	str	r2, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	e002      	b.n	8002538 <UARTvprintf+0x24c>
 8002532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002534:	3301      	adds	r3, #1
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f6      	bne.n	8002532 <UARTvprintf+0x246>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
 8002544:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002546:	69f8      	ldr	r0, [r7, #28]
 8002548:	f7ff fe16 	bl	8002178 <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	429a      	cmp	r2, r3
 8002552:	f240 80ae 	bls.w	80026b2 <UARTvprintf+0x3c6>
                    {
                        ui32Count -= ui32Idx;
 8002556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        while(ui32Count--)
 800255e:	e003      	b.n	8002568 <UARTvprintf+0x27c>
                        {
                            UARTwrite(" ", 1);
 8002560:	2101      	movs	r1, #1
 8002562:	4859      	ldr	r0, [pc, #356]	; (80026c8 <UARTvprintf+0x3dc>)
 8002564:	f7ff fe08 	bl	8002178 <UARTwrite>
                        while(ui32Count--)
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f6      	bne.n	8002560 <UARTvprintf+0x274>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8002572:	e09e      	b.n	80026b2 <UARTvprintf+0x3c6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	603a      	str	r2, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8002582:	230a      	movs	r3, #10
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800258a:	e00a      	b.n	80025a2 <UARTvprintf+0x2b6>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	603a      	str	r2, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 800259a:	2310      	movs	r3, #16
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
 80025a6:	e007      	b.n	80025b8 <UARTvprintf+0x2cc>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	3b01      	subs	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025bc:	fb03 f202 	mul.w	r2, r3, r2
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d809      	bhi.n	80025da <UARTvprintf+0x2ee>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 80025d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d0e6      	beq.n	80025a8 <UARTvprintf+0x2bc>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <UARTvprintf+0x2fa>
                    {
                        ui32Count--;
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	3b01      	subs	r3, #1
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <UARTvprintf+0x31c>
 80025ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f0:	2b30      	cmp	r3, #48	; 0x30
 80025f2:	d109      	bne.n	8002608 <UARTvprintf+0x31c>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	633a      	str	r2, [r7, #48]	; 0x30
 80025fa:	3338      	adds	r3, #56	; 0x38
 80025fc:	443b      	add	r3, r7
 80025fe:	222d      	movs	r2, #45	; 0x2d
 8002600:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	2b01      	cmp	r3, #1
 800260c:	d915      	bls.n	800263a <UARTvprintf+0x34e>
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d812      	bhi.n	800263a <UARTvprintf+0x34e>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	3b01      	subs	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	e00b      	b.n	8002634 <UARTvprintf+0x348>
                        {
                            pcBuf[ui32Pos++] = cFill;
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	633a      	str	r2, [r7, #48]	; 0x30
 8002622:	3338      	adds	r3, #56	; 0x38
 8002624:	443b      	add	r3, r7
 8002626:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800262a:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	3b01      	subs	r3, #1
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <UARTvprintf+0x330>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d022      	beq.n	8002686 <UARTvprintf+0x39a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	633a      	str	r2, [r7, #48]	; 0x30
 8002646:	3338      	adds	r3, #56	; 0x38
 8002648:	443b      	add	r3, r7
 800264a:	222d      	movs	r2, #45	; 0x2d
 800264c:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8002650:	e019      	b.n	8002686 <UARTvprintf+0x39a>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8002652:	481e      	ldr	r0, [pc, #120]	; (80026cc <UARTvprintf+0x3e0>)
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002664:	fb01 f202 	mul.w	r2, r1, r2
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	6339      	str	r1, [r7, #48]	; 0x30
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8002672:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	443b      	add	r3, r7
 8002678:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 800267c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
 8002686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e2      	bne.n	8002652 <UARTvprintf+0x366>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd70 	bl	8002178 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8002698:	e00b      	b.n	80026b2 <UARTvprintf+0x3c6>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3b01      	subs	r3, #1
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fd69 	bl	8002178 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80026a6:	e004      	b.n	80026b2 <UARTvprintf+0x3c6>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
 80026a8:	2105      	movs	r1, #5
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <UARTvprintf+0x3e4>)
 80026ac:	f7ff fd64 	bl	8002178 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80026b0:	bf00      	nop
    while(*pcString)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f ae1e 	bne.w	80022f8 <UARTvprintf+0xc>
                }
            }
        }
    }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3738      	adds	r7, #56	; 0x38
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	080029d4 	.word	0x080029d4
 80026cc:	080029c0 	.word	0x080029c0
 80026d0:	080029d8 	.word	0x080029d8

080026d4 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
 80026d4:	b40f      	push	{r0, r1, r2, r3}
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	607b      	str	r3, [r7, #4]

    UARTvprintf(pcString, vaArgP);
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fe01 	bl	80022ec <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026f4:	b004      	add	sp, #16
 80026f6:	4770      	bx	lr

080026f8 <UARTFlushRx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushRx(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0


    //
    // Temporarily turn off interrupts.
    //
    LL_USART_DisableIT_RXNE(stdUsart);
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <UARTFlushRx+0x28>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fc5d 	bl	8001fc0 <LL_USART_DisableIT_RXNE>

    //
    // Flush the receive buffer.
    //
    g_ui32UARTRxReadIndex = 0;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <UARTFlushRx+0x2c>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
    g_ui32UARTRxWriteIndex = 0;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <UARTFlushRx+0x30>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //

      LL_USART_EnableIT_RXNE(stdUsart);
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <UARTFlushRx+0x28>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fc0e 	bl	8001f38 <LL_USART_EnableIT_RXNE>

}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	200049dc 	.word	0x200049dc
 8002724:	200049d8 	.word	0x200049d8
 8002728:	200049d4 	.word	0x200049d4

0800272c <UARTFlushTx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushTx(bool bDiscard)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]


    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <UARTFlushTx+0x28>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
         LL_USART_DisableIT_TXE(stdUsart);
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <UARTFlushTx+0x48>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fc5f 	bl	8002004 <LL_USART_DisableIT_TXE>

        //
        // Flush the transmit buffer.
        //

        g_ui32UARTTxReadIndex = 0;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <UARTFlushTx+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
        g_ui32UARTTxWriteIndex = 0;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <UARTFlushTx+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
 8002752:	e00a      	b.n	800276a <UARTFlushTx+0x3e>
        while(!TX_BUFFER_EMPTY)
 8002754:	bf00      	nop
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <UARTFlushTx+0x50>)
 8002758:	4807      	ldr	r0, [pc, #28]	; (8002778 <UARTFlushTx+0x4c>)
 800275a:	f7ff fca3 	bl	80020a4 <IsBufferEmpty>
 800275e:	4603      	mov	r3, r0
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f5      	bne.n	8002756 <UARTFlushTx+0x2a>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200049dc 	.word	0x200049dc
 8002778:	20004950 	.word	0x20004950
 800277c:	2000494c 	.word	0x2000494c

08002780 <UARTStdioIntHandler>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTStdioIntHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
	static int8_t bLastWasCR = 0;
	  uint32_t isrflags   = READ_REG(stdUsart->SR);
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <UARTStdioIntHandler+0x170>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
	  uint32_t cr1its     = READ_REG(stdUsart->CR1);
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <UARTStdioIntHandler+0x170>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]

	    /*If interrupt is caused due to Transmit Data Register Empty */
	    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d024      	beq.n	80027ea <UARTStdioIntHandler+0x6a>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01f      	beq.n	80027ea <UARTStdioIntHandler+0x6a>
	    {
	    	if(TX_BUFFER_EMPTY)
 80027aa:	4952      	ldr	r1, [pc, #328]	; (80028f4 <UARTStdioIntHandler+0x174>)
 80027ac:	4852      	ldr	r0, [pc, #328]	; (80028f8 <UARTStdioIntHandler+0x178>)
 80027ae:	f7ff fc79 	bl	80020a4 <IsBufferEmpty>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <UARTStdioIntHandler+0x44>
	    	    {
	    	      // Buffer empty, so disable interrupts
	    	      LL_USART_DisableIT_TXE(stdUsart);
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <UARTStdioIntHandler+0x170>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fc21 	bl	8002004 <LL_USART_DisableIT_TXE>
 80027c2:	e012      	b.n	80027ea <UARTStdioIntHandler+0x6a>

	    	 else
	    	    {
	    	      // There is more data in the output buffer. Send the next byte

	    		 	 unsigned char c = g_pcUARTTxBuffer[g_ui32UARTTxReadIndex];
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <UARTStdioIntHandler+0x178>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <UARTStdioIntHandler+0x17c>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	71fb      	strb	r3, [r7, #7]
	    		 	 ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <UARTStdioIntHandler+0x178>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d8:	4a47      	ldr	r2, [pc, #284]	; (80028f8 <UARTStdioIntHandler+0x178>)
 80027da:	6013      	str	r3, [r2, #0]
	    	      *          USART_SR register followed by a write operation to USART_DR register.
	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

	    	      *********************/

	    	      stdUsart->SR;
 80027dc:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <UARTStdioIntHandler+0x170>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
	    	      stdUsart->DR = c;
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <UARTStdioIntHandler+0x170>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	79fa      	ldrb	r2, [r7, #7]
 80027e8:	605a      	str	r2, [r3, #4]
	    }
    //
    // Are we being interrupted due to a received character?
    //
	    /* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <UARTStdioIntHandler+0x168>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d074      	beq.n	80028e8 <UARTStdioIntHandler+0x168>

        {
            //
            // Read a character
            //
        	stdUsart->SR;
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <UARTStdioIntHandler+0x170>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
            unsigned char cChar = stdUsart->DR;
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <UARTStdioIntHandler+0x170>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	71bb      	strb	r3, [r7, #6]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <UARTStdioIntHandler+0x180>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03d      	beq.n	8002898 <UARTStdioIntHandler+0x118>
            {
                //
                // Handle backspace by erasing the last character in the
                // buffer.
                //
                if(cChar == '\b')
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d11a      	bne.n	8002858 <UARTStdioIntHandler+0xd8>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
 8002822:	4938      	ldr	r1, [pc, #224]	; (8002904 <UARTStdioIntHandler+0x184>)
 8002824:	4838      	ldr	r0, [pc, #224]	; (8002908 <UARTStdioIntHandler+0x188>)
 8002826:	f7ff fc3d 	bl	80020a4 <IsBufferEmpty>
 800282a:	4603      	mov	r3, r0
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <UARTStdioIntHandler+0xd8>
                    {
                        //
                        // Rub out the previous character on the users
                        // terminal.
                        //
                        UARTwrite("\b \b", 3);
 8002836:	2103      	movs	r1, #3
 8002838:	4834      	ldr	r0, [pc, #208]	; (800290c <UARTStdioIntHandler+0x18c>)
 800283a:	f7ff fc9d 	bl	8002178 <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ui32UARTRxWriteIndex == 0)
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <UARTStdioIntHandler+0x184>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d103      	bne.n	800284e <UARTStdioIntHandler+0xce>
                        {
                            g_ui32UARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <UARTStdioIntHandler+0x184>)
 8002848:	227f      	movs	r2, #127	; 0x7f
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e004      	b.n	8002858 <UARTStdioIntHandler+0xd8>
                        }
                        else
                        {
                            g_ui32UARTRxWriteIndex--;
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <UARTStdioIntHandler+0x184>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3b01      	subs	r3, #1
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <UARTStdioIntHandler+0x184>)
 8002856:	6013      	str	r3, [r2, #0]
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
 8002858:	79bb      	ldrb	r3, [r7, #6]
 800285a:	2b0a      	cmp	r3, #10
 800285c:	d107      	bne.n	800286e <UARTStdioIntHandler+0xee>
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <UARTStdioIntHandler+0x190>)
 8002860:	f993 3000 	ldrsb.w	r3, [r3]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <UARTStdioIntHandler+0xee>
                {
                    bLastWasCR = false;
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <UARTStdioIntHandler+0x190>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b0d      	cmp	r3, #13
 8002872:	d005      	beq.n	8002880 <UARTStdioIntHandler+0x100>
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	2b0a      	cmp	r3, #10
 8002878:	d002      	beq.n	8002880 <UARTStdioIntHandler+0x100>
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	2b1b      	cmp	r3, #27
 800287e:	d10b      	bne.n	8002898 <UARTStdioIntHandler+0x118>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	2b0d      	cmp	r3, #13
 8002884:	d102      	bne.n	800288c <UARTStdioIntHandler+0x10c>
                    {
                        bLastWasCR = 1;
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <UARTStdioIntHandler+0x190>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
 800288c:	230d      	movs	r3, #13
 800288e:	71bb      	strb	r3, [r7, #6]
                    UARTwrite("\n", 1);
 8002890:	2101      	movs	r1, #1
 8002892:	4820      	ldr	r0, [pc, #128]	; (8002914 <UARTStdioIntHandler+0x194>)
 8002894:	f7ff fc70 	bl	8002178 <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <UARTStdioIntHandler+0x184>)
 800289c:	481a      	ldr	r0, [pc, #104]	; (8002908 <UARTStdioIntHandler+0x188>)
 800289e:	f7ff fbe1 	bl	8002064 <IsBufferFull>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <UARTStdioIntHandler+0x15e>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ui32UARTRxWriteIndex] =
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <UARTStdioIntHandler+0x184>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	79b9      	ldrb	r1, [r7, #6]
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <UARTStdioIntHandler+0x198>)
 80028b6:	54d1      	strb	r1, [r2, r3]
                    (unsigned char)(cChar & 0xFF);
                ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxWriteIndex);
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <UARTStdioIntHandler+0x184>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <UARTStdioIntHandler+0x184>)
 80028c4:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <UARTStdioIntHandler+0x180>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <UARTStdioIntHandler+0x15e>
                {
                    UARTwrite((const char *)&cChar, 1);
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc4d 	bl	8002178 <UARTwrite>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(stdUsart);
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <UARTStdioIntHandler+0x170>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fbf6 	bl	80020d4 <UARTPrimeTransmit>

    }
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	200049dc 	.word	0x200049dc
 80028f4:	2000494c 	.word	0x2000494c
 80028f8:	20004950 	.word	0x20004950
 80028fc:	2000454c 	.word	0x2000454c
 8002900:	20004548 	.word	0x20004548
 8002904:	200049d4 	.word	0x200049d4
 8002908:	200049d8 	.word	0x200049d8
 800290c:	080029e0 	.word	0x080029e0
 8002910:	200049e0 	.word	0x200049e0
 8002914:	080029e4 	.word	0x080029e4
 8002918:	20004954 	.word	0x20004954

0800291c <memset>:
 800291c:	4603      	mov	r3, r0
 800291e:	4402      	add	r2, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <__libc_init_array>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	2600      	movs	r6, #0
 8002930:	4d0c      	ldr	r5, [pc, #48]	; (8002964 <__libc_init_array+0x38>)
 8002932:	4c0d      	ldr	r4, [pc, #52]	; (8002968 <__libc_init_array+0x3c>)
 8002934:	1b64      	subs	r4, r4, r5
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	42a6      	cmp	r6, r4
 800293a:	d109      	bne.n	8002950 <__libc_init_array+0x24>
 800293c:	f000 f81a 	bl	8002974 <_init>
 8002940:	2600      	movs	r6, #0
 8002942:	4d0a      	ldr	r5, [pc, #40]	; (800296c <__libc_init_array+0x40>)
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <__libc_init_array+0x44>)
 8002946:	1b64      	subs	r4, r4, r5
 8002948:	10a4      	asrs	r4, r4, #2
 800294a:	42a6      	cmp	r6, r4
 800294c:	d105      	bne.n	800295a <__libc_init_array+0x2e>
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	f855 3b04 	ldr.w	r3, [r5], #4
 8002954:	4798      	blx	r3
 8002956:	3601      	adds	r6, #1
 8002958:	e7ee      	b.n	8002938 <__libc_init_array+0xc>
 800295a:	f855 3b04 	ldr.w	r3, [r5], #4
 800295e:	4798      	blx	r3
 8002960:	3601      	adds	r6, #1
 8002962:	e7f2      	b.n	800294a <__libc_init_array+0x1e>
 8002964:	08002a00 	.word	0x08002a00
 8002968:	08002a00 	.word	0x08002a00
 800296c:	08002a00 	.word	0x08002a00
 8002970:	08002a04 	.word	0x08002a04

08002974 <_init>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr

08002980 <_fini>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr
